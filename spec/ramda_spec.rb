require 'spec_helper'

describe Ramda do
  def self.test_ramda(method)
    it "Ramda.#{method}" do
      expect(described_class).to be_respond_to(method)
    end
  end

  test_ramda(:add)
  test_ramda(:all)
  test_ramda(:all_pass)
  test_ramda(:always)
  test_ramda(:and)
  test_ramda(:any)
  test_ramda(:any_pass)
  test_ramda(:append)
  test_ramda(:clone)
  # test_ramda(:comparator)
  test_ramda(:compose)
  test_ramda(:concat)
  # test_ramda(:construct)
  test_ramda(:contains)
  test_ramda(:count_by)
  test_ramda(:curry)
  test_ramda(:difference)
  test_ramda(:difference_with)
  test_ramda(:divide)
  test_ramda(:drop)
  test_ramda(:eq_props)
  test_ramda(:equals)
  test_ramda(:filter)
  test_ramda(:find)
  test_ramda(:flatten)
  test_ramda(:flip)
  test_ramda(:group_by)
  test_ramda(:gt)
  test_ramda(:gte)
  test_ramda(:head)
  test_ramda(:identity)
  test_ramda(:index_of)
  test_ramda(:intersection)
  # test_ramda(:invoker)
  test_ramda(:is_empty)
  # test_ramda(:join)
  # test_ramda(:keys)
  # test_ramda(:last_index_of)
  test_ramda(:lt)
  # test_ramda(:lte)
  # test_ramda(:map)
  # test_ramda(:match)
  # test_ramda(:max)
  # test_ramda(:memoize)
  # test_ramda(:merge)
  # test_ramda(:min)
  test_ramda(:multiply)
  # test_ramda(:n_ary)
  # test_ramda(:not)
  # test_ramda(:nth)
  # test_ramda(:omit)
  # test_ramda(:once)
  # test_ramda(:or)
  # test_ramda(:pick)
  # test_ramda(:pick_all)
  # test_ramda(:pipe)
  # test_ramda(:pluck)
  # test_ramda(:prepend)
  # test_ramda(:product)
  # test_ramda(:project)
  # test_ramda(:prop)
  test_ramda(:prop_eq)
  # test_ramda(:props)
  # test_ramda(:range)
  # test_ramda(:reduce)
  # test_ramda(:reduce_right)
  # test_ramda(:reject)
  # test_ramda(:reverse)
  # test_ramda(:sort)
  # test_ramda(:sort_by)
  # test_ramda(:split)
  # test_ramda(:substract)
  # test_ramda(:sum)
  # test_ramda(:tail)
  # test_ramda(:take)
  # test_ramda(:take_while)
  # test_ramda(:tap)
  test_ramda(:to_lower)
  test_ramda(:to_upper)
  # test_ramda(:union)
  # test_ramda(:union_with)
  # test_ramda(:uniq)
  # test_ramda(:use_with)
  # test_ramda(:values)
  # test_ramda(:xprod)
  # test_ramda(:zip)
  # test_ramda(:zip_with)
end
